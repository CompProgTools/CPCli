{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the CP-Cli Documentation Site This is where you can find quick documentation for the commands and how to use them. Table of Contents Installation First Time Setup Setting Up Templates Syncing Accounts Testing Code LeetCode Commands Codeforces Commands Statistics Installation If all you want to do is update the codebase, run python3 main.py update As of now, here are the installation steps: Keep in mind that Windows is the only supported OS for now (due to cross-system issues) Go to the latest install of CP-Cli on the repository Download the latest install for your specifc operating system Copy the pathname of your install location (.exe, .app, etc) Now you will make the commands accessible by a global command. If you're on windows, try the following: Copy the pathname of your installation Press Windows + S Type in Edit the system environment variables Once in there, click on Environment Variables Under System Variables , select Path and click Edit Click New and paste the path that you copied Save everything and exit Once that's done, restart your terminal and you're good to go. Now you can test your installation by running: cp-cli Test the output, does it match the following? Hi! This is CPCli, a command line tool for competitive programmers ? What would you like to do? > View Repository Coming soon... Exit If it matches the output above, your installation of CP-Cli is good to go! First Time Setup Now that you've got CP-Cli installed, it's important to set it up properly in order to have a good experience! We will now setup the account(s) on LeetCode and Codeforces In order to do the first time setup, run: cp-cli config The config subcommand allows you to set your name, preferred language, code editor, Codeforces username, Leetcode username, and the template output folder. The only confusing one should be the tempalate output folder, so you can skip that and configure everything else to your liking. Once thats done you can go to .cpcli/config.json file and make sure everything is right. REMEMBER: All your config files and everything else will be stored in the .cpcli folder. Once you've setup your profiles, run python3 main.py sync . This command fetches the rating for the account(s), if this command works successfully that means your accounts are good to go!. You can move onto the next step. Setting Up Templates In order to setup a template, you must first understand what a template is. A template is basically pre-written code that is used to speed up the process during the contest. Here is Tourists template for multithreaded programming. It's important to have a good templates that works for you . While using someone elses template is a good start, you write well with your own template. In order to create and use a template that CP-Cli can recognize, run the command: cp-cli template --make name.ext --alias alias BUT WAIT In order to run this command you must first understand what each part means. The template subcommand is a collection of flags under the location subcommands/template.py . It contains 4 main commands: --make : This flag allows you to create a template file under the location .cpcli/templates following the --make flag, you must put the filename of your extension in the format filename.extension . This flag must be followed up by the --alias flag. --alias : This flag allows you to give a template an alias. In the last flag you were taught how to assign a template, in this one, you will be naming it. An alias is just a name you assign to a template for easy access. Moving onto actually using the template. In order to use the template during a contest, here is the command: cp-cli template --use alias --filename name.ext This command uses the same concepts as the last, but with a few changes in the flags used. --use : The use flag is to be used in order to call a template by its alias. --filename : The filename flag is used to create a filename with the format filename.extension . This simple yet powerful command opens up a file at the location defined in the config command at python3 main.py config . This is what the Set Template Output Folder option was meant for. Setting a location in this command means that when you use the use and filename flag command, a file is created at the location defined under Set Template Output Folder with the selected template alias. You can also use the --list flag in order to list all your teamplates, their aliases, and their template file names. Here is the usage: cp-cli template --list Syncing Accounts If you setup your account(s) using the config command, you can fetch their ratings using the command: cp-cli sync This will show your changes in rating (if any). Learning How To Test Code If you would like to quick test your code by using custom testcases (stdin/stdout) you can do so by using the following command: cp-cli test filename.extension The format here is pretty simple to follow, but for the filename, make sure to put the full path or else CP-Cli wont reccognize it as a file in the source directory. Once you enter the command, you will be asked to ask the number of testcases, which must be an integer , after which you can enter the input for the testcase as well as the output. LeetCode Specific Commands As of now, the only LeetCode specific command is the daily subcommand. Here is how to use it: cp-cli daily This will display todays daily question in a table format. Codeforces Specific Commands Since the Codeforces API is much more diverse when compared to the third-party LeetCode API, you can expect much more commands to show up. In order to use any Codeforces command, here is the format: cp-cli cf --flag As of now, CP-Cli offers two commands: --list : This flag allows you to list upcoming contests in a nice table like format. --solved <contestId>/<index> : This flag allows you to log a problem you've solved. The format is contestId/Index. Every problem on codeforces comes from a contest, so the id of the contest not the contest number and the index is which problem it is in a letter format. Statistics Commands In order to track your progress so far, I've made some subcommands to check number of problems solved, common tags, average rating, etc. These stats include general pieces of info that I find useful, but if you want to contribute and add onto, feel free to do so. Here are the statistics commands: stats : The stats command gives a general overview of your highest streak, number of problems solved, highest rating, average rating, etc. This command should be enough for most users, but you can customize as you want.","title":"Home"},{"location":"#welcome-to-the-cp-cli-documentation-site","text":"This is where you can find quick documentation for the commands and how to use them.","title":"Welcome to the CP-Cli Documentation Site"},{"location":"#table-of-contents","text":"Installation First Time Setup Setting Up Templates Syncing Accounts Testing Code LeetCode Commands Codeforces Commands Statistics","title":"Table of Contents"},{"location":"#installation","text":"If all you want to do is update the codebase, run python3 main.py update As of now, here are the installation steps: Keep in mind that Windows is the only supported OS for now (due to cross-system issues) Go to the latest install of CP-Cli on the repository Download the latest install for your specifc operating system Copy the pathname of your install location (.exe, .app, etc) Now you will make the commands accessible by a global command. If you're on windows, try the following: Copy the pathname of your installation Press Windows + S Type in Edit the system environment variables Once in there, click on Environment Variables Under System Variables , select Path and click Edit Click New and paste the path that you copied Save everything and exit Once that's done, restart your terminal and you're good to go. Now you can test your installation by running: cp-cli Test the output, does it match the following? Hi! This is CPCli, a command line tool for competitive programmers ? What would you like to do? > View Repository Coming soon... Exit If it matches the output above, your installation of CP-Cli is good to go!","title":"Installation"},{"location":"#first-time-setup","text":"Now that you've got CP-Cli installed, it's important to set it up properly in order to have a good experience! We will now setup the account(s) on LeetCode and Codeforces In order to do the first time setup, run: cp-cli config The config subcommand allows you to set your name, preferred language, code editor, Codeforces username, Leetcode username, and the template output folder. The only confusing one should be the tempalate output folder, so you can skip that and configure everything else to your liking. Once thats done you can go to .cpcli/config.json file and make sure everything is right. REMEMBER: All your config files and everything else will be stored in the .cpcli folder. Once you've setup your profiles, run python3 main.py sync . This command fetches the rating for the account(s), if this command works successfully that means your accounts are good to go!. You can move onto the next step.","title":"First Time Setup"},{"location":"#setting-up-templates","text":"In order to setup a template, you must first understand what a template is. A template is basically pre-written code that is used to speed up the process during the contest. Here is Tourists template for multithreaded programming. It's important to have a good templates that works for you . While using someone elses template is a good start, you write well with your own template. In order to create and use a template that CP-Cli can recognize, run the command: cp-cli template --make name.ext --alias alias BUT WAIT In order to run this command you must first understand what each part means. The template subcommand is a collection of flags under the location subcommands/template.py . It contains 4 main commands: --make : This flag allows you to create a template file under the location .cpcli/templates following the --make flag, you must put the filename of your extension in the format filename.extension . This flag must be followed up by the --alias flag. --alias : This flag allows you to give a template an alias. In the last flag you were taught how to assign a template, in this one, you will be naming it. An alias is just a name you assign to a template for easy access. Moving onto actually using the template. In order to use the template during a contest, here is the command: cp-cli template --use alias --filename name.ext This command uses the same concepts as the last, but with a few changes in the flags used. --use : The use flag is to be used in order to call a template by its alias. --filename : The filename flag is used to create a filename with the format filename.extension . This simple yet powerful command opens up a file at the location defined in the config command at python3 main.py config . This is what the Set Template Output Folder option was meant for. Setting a location in this command means that when you use the use and filename flag command, a file is created at the location defined under Set Template Output Folder with the selected template alias. You can also use the --list flag in order to list all your teamplates, their aliases, and their template file names. Here is the usage: cp-cli template --list","title":"Setting Up Templates"},{"location":"#syncing-accounts","text":"If you setup your account(s) using the config command, you can fetch their ratings using the command: cp-cli sync This will show your changes in rating (if any).","title":"Syncing Accounts"},{"location":"#learning-how-to-test-code","text":"If you would like to quick test your code by using custom testcases (stdin/stdout) you can do so by using the following command: cp-cli test filename.extension The format here is pretty simple to follow, but for the filename, make sure to put the full path or else CP-Cli wont reccognize it as a file in the source directory. Once you enter the command, you will be asked to ask the number of testcases, which must be an integer , after which you can enter the input for the testcase as well as the output.","title":"Learning How To Test Code"},{"location":"#leetcode-specific-commands","text":"As of now, the only LeetCode specific command is the daily subcommand. Here is how to use it: cp-cli daily This will display todays daily question in a table format.","title":"LeetCode Specific Commands"},{"location":"#codeforces-specific-commands","text":"Since the Codeforces API is much more diverse when compared to the third-party LeetCode API, you can expect much more commands to show up. In order to use any Codeforces command, here is the format: cp-cli cf --flag As of now, CP-Cli offers two commands: --list : This flag allows you to list upcoming contests in a nice table like format. --solved <contestId>/<index> : This flag allows you to log a problem you've solved. The format is contestId/Index. Every problem on codeforces comes from a contest, so the id of the contest not the contest number and the index is which problem it is in a letter format.","title":"Codeforces Specific Commands"},{"location":"#statistics-commands","text":"In order to track your progress so far, I've made some subcommands to check number of problems solved, common tags, average rating, etc. These stats include general pieces of info that I find useful, but if you want to contribute and add onto, feel free to do so. Here are the statistics commands: stats : The stats command gives a general overview of your highest streak, number of problems solved, highest rating, average rating, etc. This command should be enough for most users, but you can customize as you want.","title":"Statistics Commands"},{"location":"about/","text":"About CP-Cli is a CLI tool meant for competitive programmers to increase worflow and speed during contests. Built by Kashyap Sukshavasi @kashsuks as a part of Hack Clubs Summer of Making Event As a competitive programmer myself, I have felt that the community isn't widely recognized and doesn't have good tools for competitive programmers. You see other tools to improve workflow for hackathons to generate ideas or find teammates, but competitive programming doesn't have that kind of tools. Even if they do, they don't get the recognition they deserve. Thats why I built this tool. I realized that creating and using templates was a pretty tedious task, so I wanted to write a quick script for this. That was how CP-Cli was born. The quick script was very helpful, so I decided to expand to more things. The only mainstream tool to sync stats and have a quick overview of all your profiles is Clist . Thats why I decided to add a sync feature in order to get a quick glance of my accounts. This project wasn't a very original thought of mine, while there were tools on Github pretty similar to mine, I felt that their backend or the way the project works wasn't to my liking, so I made my own. CP-Cli was heavily influenced by cpt by cp-tools. Feel free to check them out, and give them a star!","title":"About"},{"location":"about/#about","text":"CP-Cli is a CLI tool meant for competitive programmers to increase worflow and speed during contests. Built by Kashyap Sukshavasi @kashsuks as a part of Hack Clubs Summer of Making Event As a competitive programmer myself, I have felt that the community isn't widely recognized and doesn't have good tools for competitive programmers. You see other tools to improve workflow for hackathons to generate ideas or find teammates, but competitive programming doesn't have that kind of tools. Even if they do, they don't get the recognition they deserve. Thats why I built this tool. I realized that creating and using templates was a pretty tedious task, so I wanted to write a quick script for this. That was how CP-Cli was born. The quick script was very helpful, so I decided to expand to more things. The only mainstream tool to sync stats and have a quick overview of all your profiles is Clist . Thats why I decided to add a sync feature in order to get a quick glance of my accounts. This project wasn't a very original thought of mine, while there were tools on Github pretty similar to mine, I felt that their backend or the way the project works wasn't to my liking, so I made my own. CP-Cli was heavily influenced by cpt by cp-tools. Feel free to check them out, and give them a star!","title":"About"},{"location":"code_of_conduct/","text":"Code of Conduct Like the technical community as a whole, the CP-Cli team and community is made up of a mixture of professionals and volunteers from all over the world, working on every aspect of the mission - including mentorship, teaching, and connecting people. Diversity is one of our huge strengths, but it can also lead to communication issues and unhappiness. To that end, we have a few ground rules that we ask people to adhere to. This code applies equally to founders, mentors and those seeking help and guidance. This isn\u2019t an exhaustive list of things that you can\u2019t do. Rather, take it in the spirit in which it\u2019s intended - a guide to make it easier to enrich all of us and the technical communities in which we participate. This code of conduct applies to all spaces managed by the Cp-Cli project or CompProgTools. This includes IRC, the mailing lists, the issue tracker, DSF events, and any other forums created by the project team which the community uses for communication. In addition, violations of this code outside these spaces may affect a person's ability to participate within them. If you believe someone is violating the code of conduct, we ask that you report it by emailing ksukshavasi@gmail.com . For more details please see our Be friendly and patient. Be welcoming. We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability. Be considerate. Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language. Be respectful. Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It\u2019s important to remember that a community where people feel uncomfortable or threatened is not a productive one. Members of the Cp-Cli community should be respectful when dealing with other members as well as with people outside the Cp-Cli community. Original text courtesy of the Speak Up! project . Questions? If you have questions, please see the FAQ . If that doesn't answer your questions, feel free to contact us .","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"Like the technical community as a whole, the CP-Cli team and community is made up of a mixture of professionals and volunteers from all over the world, working on every aspect of the mission - including mentorship, teaching, and connecting people. Diversity is one of our huge strengths, but it can also lead to communication issues and unhappiness. To that end, we have a few ground rules that we ask people to adhere to. This code applies equally to founders, mentors and those seeking help and guidance. This isn\u2019t an exhaustive list of things that you can\u2019t do. Rather, take it in the spirit in which it\u2019s intended - a guide to make it easier to enrich all of us and the technical communities in which we participate. This code of conduct applies to all spaces managed by the Cp-Cli project or CompProgTools. This includes IRC, the mailing lists, the issue tracker, DSF events, and any other forums created by the project team which the community uses for communication. In addition, violations of this code outside these spaces may affect a person's ability to participate within them. If you believe someone is violating the code of conduct, we ask that you report it by emailing ksukshavasi@gmail.com . For more details please see our Be friendly and patient. Be welcoming. We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability. Be considerate. Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language. Be respectful. Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It\u2019s important to remember that a community where people feel uncomfortable or threatened is not a productive one. Members of the Cp-Cli community should be respectful when dealing with other members as well as with people outside the Cp-Cli community. Original text courtesy of the Speak Up! project .","title":"Code of Conduct"},{"location":"code_of_conduct/#questions","text":"If you have questions, please see the FAQ . If that doesn't answer your questions, feel free to contact us .","title":"Questions?"},{"location":"contribute/","text":"How to Contribute to CP-Cli CP-Cli was a tool I made for competitive programmers to have a platform/tool to easily access quick commands and general workflow optimisations during contests. We see these kinds of tools all across the tech industry, through hackathon idea generators, or task assigning tools, there are lots of apps out there for different parts of the field. Competitive Programming however doesn't have that many tools, there are platforms such as Codeforces and Codechef but they serve the task of providing problems. CP-Cli however aims to improve speed and general comfort for competitive programmers, taking the tedious tasks off their mind and allowing them to focus on the important things. If you want to contribute to this project, it is important that you understand this, and apply it in your perspective. If you are able to think like a competitive programmer, you can definitely build amazing software for them! Please refer to the contribute.md file for more information on this.","title":"Contribute"},{"location":"contribute/#how-to-contribute-to-cp-cli","text":"CP-Cli was a tool I made for competitive programmers to have a platform/tool to easily access quick commands and general workflow optimisations during contests. We see these kinds of tools all across the tech industry, through hackathon idea generators, or task assigning tools, there are lots of apps out there for different parts of the field. Competitive Programming however doesn't have that many tools, there are platforms such as Codeforces and Codechef but they serve the task of providing problems. CP-Cli however aims to improve speed and general comfort for competitive programmers, taking the tedious tasks off their mind and allowing them to focus on the important things. If you want to contribute to this project, it is important that you understand this, and apply it in your perspective. If you are able to think like a competitive programmer, you can definitely build amazing software for them! Please refer to the contribute.md file for more information on this.","title":"How to Contribute to CP-Cli"},{"location":"faq/","text":"FAQ (Frequently Asked Questions) This part of the documentation site aims to answer the most frequently asked questions (that I have and others have) Q1 What is CP-Cli CP-Cli is a command line tool built using python that aims to improve efficiency for competitive programmers during contest and practice. It has commands for quick template code turnaround, ratings, stats, graphs, and other useful tools that can help you in your journey.","title":"FAQ (Frequently Asked Questions)"},{"location":"faq/#faq-frequently-asked-questions","text":"This part of the documentation site aims to answer the most frequently asked questions (that I have and others have)","title":"FAQ (Frequently Asked Questions)"},{"location":"faq/#q1","text":"What is CP-Cli CP-Cli is a command line tool built using python that aims to improve efficiency for competitive programmers during contest and practice. It has commands for quick template code turnaround, ratings, stats, graphs, and other useful tools that can help you in your journey.","title":"Q1"}]}
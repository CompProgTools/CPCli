{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the CP-Cli Documentation Site This is where you can find quick documentation for the commands and how to use them. Table of Contents Installation First Time Setup Setting Up Templates Syncing Accounts Testing Code LeetCode Commands Codeforces Commands Installation The installation process of CP-Cli is quite simple, as of now, its just a project with python files, but sooner of later, I will turn it into .exe , .dmg / .app , and installations for Linux devices. As of now, here are the installation steps: - Clone the repository from Github git clone https://github.com/CompProgTools/CPCli Change directory into the repository location cd CPCli Run the python file python3 main.py Test the output, does it match the following? Hi! This is CPCli, a command line tool for competitive programmers ? What would you like to do? > View Repository Coming soon... Exit If it matches the output above, your installation of CP-Cli is good to go! First Time Setup Now that you've got CP-Cli installed, it's important to set it up properly in order to have a good experience! We will now setup the account(s) on LeetCode and Codeforces In order to do the first time setup, run: python3 main.py config The config subcommand allows you to set your name, preferred language, code editor, Codeforces username, Leetcode username, and the template output folder. The only confusing one should be the tempalate output folder, so you can skip that and configure everything else to your liking. Once thats done you can go to .cpcli/config.json file and make sure everything is right. REMEMBER: All your config files and everything else will be stored in the .cpcli folder. Once you've setup your profiles, run python3 main.py sync . This command fetches the rating for the account(s), if this command works successfully that means your accounts are good to go!. You can move onto the next step. Setting Up Templates In order to setup a template, you must first understand what a template is. A template is basically pre-written code that is used to speed up the process during the contest. Here is Tourists template for multithreaded programming. It's important to have a good templates that works for you . While using someone elses template is a good start, you write well with your own template. In order to create and use a template that CP-Cli can recognize, run the command: cp-cli template --make name.ext --alias alias BUT WAIT In order to run this command you must first understand what each part means. The template subcommand is a collection of flags under the location subcommands/template.py . It contains 4 main commands: --make : This flag allows you to create a template file under the location .cpcli/templates following the --make flag, you must put the filename of your extension in the format filename.extension . This flag must be followed up by the --alias flag. --alias : This flag allows you to give a template an alias. In the last flag you were taught how to assign a template, in this one, you will be naming it. An alias is just a name you assign to a template for easy access. Moving onto actually using the template. In order to use the template during a contest, here is the command: cp-cli template --use alias --filename name.ext This command uses the same concepts as the last, but with a few changes in the flags used. --use : The use flag is to be used in order to call a template by its alias. --filename : The filename flag is used to create a filename with the format filename.extension . This simple yet powerful command opens up a file at the location defined in the config command at python3 main.py config . This is what the Set Template Output Folder option was meant for. Setting a location in this command means that when you use the use and filename flag command, a file is created at the location defined under Set Template Output Folder with the selected template alias. You can also use the --list flag in order to list all your teamplates, their aliases, and their template file names. Here is the usage: python3 main.py template --list Syncing Accounts If you setup your account(s) using the config command, you can fetch their ratings using the command: python3 main.py sync This will show your changes in rating (if any). Learning How To Test Code If you would like to quick test your code by using custom testcases (stdin/stdout) you can do so by using the following command: python3 main.py test filename.extension The format here is pretty simple to follow, but for the filename, make sure to put the full path or else CP-Cli wont reccognize it as a file in the source directory. Once you enter the command, you will be asked to ask the number of testcases, which must be an integer , after which you can enter the input for the testcase as well as the output. LeetCode Specific Commands As of now, the only LeetCode specific command is the daily subcommand. Here is how to use it: python3 main.py daily This will display todays daily question in a table format. Codeforces Specific Commands Since the Codeforces API is much more diverse when compared to the third-party LeetCode API, you can expect much more commands to show up. In order to use any Codeforces command, here is the format: python3 main.py cf --flag As of now, CP-Cli offers one command: --list : This flag allows you to list upcoming contests in a nice table like format.","title":"Home"},{"location":"#welcome-to-the-cp-cli-documentation-site","text":"This is where you can find quick documentation for the commands and how to use them.","title":"Welcome to the CP-Cli Documentation Site"},{"location":"#table-of-contents","text":"Installation First Time Setup Setting Up Templates Syncing Accounts Testing Code LeetCode Commands Codeforces Commands","title":"Table of Contents"},{"location":"#installation","text":"The installation process of CP-Cli is quite simple, as of now, its just a project with python files, but sooner of later, I will turn it into .exe , .dmg / .app , and installations for Linux devices. As of now, here are the installation steps: - Clone the repository from Github git clone https://github.com/CompProgTools/CPCli Change directory into the repository location cd CPCli Run the python file python3 main.py Test the output, does it match the following? Hi! This is CPCli, a command line tool for competitive programmers ? What would you like to do? > View Repository Coming soon... Exit If it matches the output above, your installation of CP-Cli is good to go!","title":"Installation"},{"location":"#first-time-setup","text":"Now that you've got CP-Cli installed, it's important to set it up properly in order to have a good experience! We will now setup the account(s) on LeetCode and Codeforces In order to do the first time setup, run: python3 main.py config The config subcommand allows you to set your name, preferred language, code editor, Codeforces username, Leetcode username, and the template output folder. The only confusing one should be the tempalate output folder, so you can skip that and configure everything else to your liking. Once thats done you can go to .cpcli/config.json file and make sure everything is right. REMEMBER: All your config files and everything else will be stored in the .cpcli folder. Once you've setup your profiles, run python3 main.py sync . This command fetches the rating for the account(s), if this command works successfully that means your accounts are good to go!. You can move onto the next step.","title":"First Time Setup"},{"location":"#setting-up-templates","text":"In order to setup a template, you must first understand what a template is. A template is basically pre-written code that is used to speed up the process during the contest. Here is Tourists template for multithreaded programming. It's important to have a good templates that works for you . While using someone elses template is a good start, you write well with your own template. In order to create and use a template that CP-Cli can recognize, run the command: cp-cli template --make name.ext --alias alias BUT WAIT In order to run this command you must first understand what each part means. The template subcommand is a collection of flags under the location subcommands/template.py . It contains 4 main commands: --make : This flag allows you to create a template file under the location .cpcli/templates following the --make flag, you must put the filename of your extension in the format filename.extension . This flag must be followed up by the --alias flag. --alias : This flag allows you to give a template an alias. In the last flag you were taught how to assign a template, in this one, you will be naming it. An alias is just a name you assign to a template for easy access. Moving onto actually using the template. In order to use the template during a contest, here is the command: cp-cli template --use alias --filename name.ext This command uses the same concepts as the last, but with a few changes in the flags used. --use : The use flag is to be used in order to call a template by its alias. --filename : The filename flag is used to create a filename with the format filename.extension . This simple yet powerful command opens up a file at the location defined in the config command at python3 main.py config . This is what the Set Template Output Folder option was meant for. Setting a location in this command means that when you use the use and filename flag command, a file is created at the location defined under Set Template Output Folder with the selected template alias. You can also use the --list flag in order to list all your teamplates, their aliases, and their template file names. Here is the usage: python3 main.py template --list","title":"Setting Up Templates"},{"location":"#syncing-accounts","text":"If you setup your account(s) using the config command, you can fetch their ratings using the command: python3 main.py sync This will show your changes in rating (if any).","title":"Syncing Accounts"},{"location":"#learning-how-to-test-code","text":"If you would like to quick test your code by using custom testcases (stdin/stdout) you can do so by using the following command: python3 main.py test filename.extension The format here is pretty simple to follow, but for the filename, make sure to put the full path or else CP-Cli wont reccognize it as a file in the source directory. Once you enter the command, you will be asked to ask the number of testcases, which must be an integer , after which you can enter the input for the testcase as well as the output.","title":"Learning How To Test Code"},{"location":"#leetcode-specific-commands","text":"As of now, the only LeetCode specific command is the daily subcommand. Here is how to use it: python3 main.py daily This will display todays daily question in a table format.","title":"LeetCode Specific Commands"},{"location":"#codeforces-specific-commands","text":"Since the Codeforces API is much more diverse when compared to the third-party LeetCode API, you can expect much more commands to show up. In order to use any Codeforces command, here is the format: python3 main.py cf --flag As of now, CP-Cli offers one command: --list : This flag allows you to list upcoming contests in a nice table like format.","title":"Codeforces Specific Commands"},{"location":"about/","text":"About CP-Cli is a CLI tool meant for competitive programmers to increase worflow and speed during contests. Built by Kashyap Sukshavasi @kashsuks as a part of Hack Clubs Summer of Making Event As a competitive programmer myself, I have felt that the community isn't widely recognized and doesn't have good tools for competitive programmers. You see other tools to improve workflow for hackathons to generate ideas or find teammates, but competitive programming doesn't have that kind of tools. Even if they do, they don't get the recognition they deserve. Thats why I built this tool. I realized that creating and using templates was a pretty tedious task, so I wanted to write a quick script for this. That was how CP-Cli was born. The quick script was very helpful, so I decided to expand to more things. The only mainstream tool to sync stats and have a quick overview of all your profiles is Clist . Thats why I decided to add a sync feature in order to get a quick glance of my accounts. This project wasn't a very original thought of mine, while there were tools on Github pretty similar to mine, I felt that their backend or the way the project works wasn't to my liking, so I made my own. CP-Cli was heavily influenced by cpt by cp-tools. Feel free to check them out, and give them a star!","title":"About"},{"location":"about/#about","text":"CP-Cli is a CLI tool meant for competitive programmers to increase worflow and speed during contests. Built by Kashyap Sukshavasi @kashsuks as a part of Hack Clubs Summer of Making Event As a competitive programmer myself, I have felt that the community isn't widely recognized and doesn't have good tools for competitive programmers. You see other tools to improve workflow for hackathons to generate ideas or find teammates, but competitive programming doesn't have that kind of tools. Even if they do, they don't get the recognition they deserve. Thats why I built this tool. I realized that creating and using templates was a pretty tedious task, so I wanted to write a quick script for this. That was how CP-Cli was born. The quick script was very helpful, so I decided to expand to more things. The only mainstream tool to sync stats and have a quick overview of all your profiles is Clist . Thats why I decided to add a sync feature in order to get a quick glance of my accounts. This project wasn't a very original thought of mine, while there were tools on Github pretty similar to mine, I felt that their backend or the way the project works wasn't to my liking, so I made my own. CP-Cli was heavily influenced by cpt by cp-tools. Feel free to check them out, and give them a star!","title":"About"}]}